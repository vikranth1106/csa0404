#include <stdio.h>

#define MAX 100

struct Process {
    int pid;              // Process ID
    int arrival_time;     // Arrival Time
    int burst_time;       // Burst Time
    int waiting_time;     // Waiting Time
    int turnaround_time;  // Turnaround Time
    int completed;        // Completion flag
};

int main() {
    struct Process p[MAX];
    int n, time = 0, completed = 0;
    int shortest, min_bt;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time for Process %d: ", p[i].pid);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for Process %d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
        p[i].completed = 0;
    }

    // Scheduling
    while (completed < n) {
        shortest = -1;
        min_bt = 9999;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && !p[i].completed && p[i].burst_time < min_bt) {
                min_bt = p[i].burst_time;
                shortest = i;
            }
        }

        if (shortest == -1) {
            time++;  // No available process, CPU is idle
        } else {
            p[shortest].waiting_time = time - p[shortest].arrival_time;
            time += p[shortest].burst_time;
            p[shortest].turnaround_time = time - p[shortest].arrival_time;
            p[shortest].completed = 1;
            completed++;
        }
    }

    // Display output
    printf("\nNon-Preemptive SJF Scheduling:\n");
    printf("PID\tArrival\tBurst\tWaiting\tTurnaround\n");

    float total_wait = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].arrival_time, p[i].burst_time,
               p[i].waiting_time, p[i].turnaround_time);
        total_wait += p[i].waiting_time;
        total_tat += p[i].turnaround_time;
    }

    printf("\nAverage Waiting Time    : %.2f", total_wait / n);
    printf("\nAverage Turnaround Time : %.2f\n", total_tat / n);

    return 0;
}
output:
Enter the number of processes: 2
Enter arrival time for Process 1: 4
Enter burst time for Process 1: 6
Enter arrival time for Process 2: 5
Enter burst time for Process 2: 5

Non-Preemptive SJF Scheduling:
PID	Arrival	Burst	Waiting	Turnaround
1	4	6	0	6
2	5	5	5	10

Average Waiting Time    : 2.50
Average Turnaround Time : 8.00
